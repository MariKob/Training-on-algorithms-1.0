K1, M, K2, P2, N2 = map(int, input().split())

# Получить пересечение двух списков
def get_intersection(a, b):
    lst = []
    for i in a:
        if i in b:
            lst.append(i)
    return lst

# Получить целое из интервала (a включая, b включая)
def get_whole_of_range(a, b):
    lst = []
    for i in range (int(a), int(b)+1):
        if a<=i and i<=b:
            lst.append(i)
    return lst

def incorrect_input():
    # Указанный этаж не существует
    if N2>M:
        return -1
    # Меньше 1 квартиры на этаже
    elif K2<(N2+(P2-1)*M):
        return -1
    
    #Неправильная комбинация
    elif not (P2==1 and N2==1):
        # Если подъезд 1:
        # Квартира располагается в интервале (N2-1)X+1 <= K2 <= N2X
        # где X - число квартир на этаже K2/N2 <= X <=(K2-1)/(N2-1)
        # Если подъезд НЕ 1:
        # В подъездах ДО текущего располагается еще (P2-1)MX квартир
        # Квартира располагается в интервале (P2-1)MX + (N2-1)X+1 <= K2 <= (P2-1)MX + N2X
        # Тогда K2/N2 <= X <=(K2-1)/[(N2-1)+(P2-1)M]
        # Если решений для X в целых числах нет, то данные некорректны
        
        lst1 = get_whole_of_range(K2/(N2+(P2-1)*M), (K2-1)/((N2-1)+(P2-1)*M))
        if (len(lst1) == 0):
            return -1
        
        # Аналогично проверим в каком подъезде располагается квартира
        # Квартира располагается взаданном подъезде, если число X в интервале K2/(P2*M) <= X <=(K2-1)/[(P2-1)M]
        # Если подъезд 1, то X неограниченно верхней границей
        if P2 == 1:
            lst = []
            for i in lst1:
                if K2/M<=i :
                    lst.append(i)
           
            if len(lst) == 0:
                return -1
        else:
            lst2 = get_whole_of_range(K2/(P2*M), (K2-1)/((P2-1)*M))
            
            # Если в пересечении lst1 и lst2 есть числа, то это возможные значения числа X -> данные корректны
            lst = get_intersection(lst1, lst2)
            if len(lst) == 0:
                return -1
        
    return 1

def simple_cases():
    if K1 == K2:
        print(P2, N2)
        return 1
    elif P2 == 1:
        if N2 == 1:
            if K1 < K2:
                print(1, 1)
                return 1
            else:
                # При таком раскладе на этаже как минимум K2 квартир
                # В 1 подъезде тогда минимум K2*M квартир
                # Проверим, окажется ли K1 в одном подъезде с K2
                if M*K2 >= K1:
                    if M == 1:
                        print(1, 1)
                        return 1
                    else:
                        print(1, 0)
                        return 1
                else:
                    if M == 1:
                        print(0, 1)
                        return 1
                    else:
                        print(0, 0)
                        return 1
        
    return 0
            
    
if incorrect_input() == -1:
    print(-1, -1)
elif simple_cases() == 0:    
    lst1 = get_whole_of_range(K2/(N2+(P2-1)*M), (K2-1)/((N2-1)+(P2-1)*M)) # Варианты кол-ва квартир на этаже
    if P2 == 1:
        lst = []
        for i in lst1:
            if K2/M<=i :
                lst.append(i)
       
    else:
        lst2 = get_whole_of_range(K2/(P2*M), (K2-1)/((P2-1)*M))
        
        # Если в пересечении lst1 и lst2 есть числа, то это возможные значения числа X -> данные корректны
        lst = get_intersection(lst1, lst2)
            
    values_P = []
    values_N = []
    
    for X in lst:
        if K1%(X*M) == 0: # Последняя квартира в подъезде
            values_P.append(K1//(X*M))
            values_N.append(M)
        else:
            P1 = K1//(X*M) + 1
            values_P.append(P1)
            # Первая квартира в этом (P1) подъезде (P1-1)*M*X + 1
            # Тогда квартира K1 в подъезде P1 является K1 - [номер первой в этом подъезде] + 1 по счету (назовем это число cnt)
            cnt = K1 - ((P1-1)*M*X + 1) + 1
            if cnt%X == 0: # Последняя квартира на этаже
                values_N.append(cnt//X)
            else:
                values_N.append(cnt//X + 1)
                
    if len(set(values_P)) == 1 and len(set(values_N)) == 1:
        print(values_P[0], values_N[0])
    elif len(set(values_P)) > 1 and len(set(values_N)) == 1:
        print(0, values_N[0])    
    elif len(set(values_P)) == 1 and len(set(values_N)) > 1:
        if M == 1:
            print(values_P[0], 1) 
        else:
            print(values_P[0], 0)           
    else:
        if M == 1:
            print(0, 1) 
        else:
            print(0, 0)          
            
        
