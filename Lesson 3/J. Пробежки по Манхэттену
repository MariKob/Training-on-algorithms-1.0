# Если нарисовать несколько примеров, можно заметить закономерность:
# 1) зона возможных точек перемещения представляет собой прямоугольник (в частных случаях квадрат), расположенный под наклоном 45° к основным осям
# 2) зона действия навигатора также представляет собой квадрат
# Тогда пересечение этих прямоугольников содержит точки, в которых может находиться Миша и которые не противоречат показаниям навигатора.
# Затем алгоритм задачи ведет себя аналогичным образом:
# полученный прямоугольник (область пересечения) расширяется во всех направлениях на t (т.к. каждую минуту прибавляем 1)
# и вновь строится пресечение с областью покрытия навигатора (уже построенной вокруг новой точки).
# Алгоритм повторяется, пока не закончатся показания навигатора.

# Удобнее вычислять пересечения и координаты самих областей, если построить новые оси, повернутые на угол 45° по отношению к изначальным.
# ось OY' будет соответствовать диагонали слева направо и снизу вверх (⬈)
# ось OX' будет соответствовать диагонали слева направо и сверху вниз (⬊)
# В такой новой системе координат будут присутствивать точки, не выделяемые в старой (не лежат на пересечении авеню и улицы)
# Отсечение таких точек будет проводиться при конвертации обратно в старую систему координат

# К решению приложены рисунки (J. Рисунки.jpg) для понимания алгоритма:
# Рис.1 и рис.2 показывают пересечение зоны навигатора (зеленая и синяя фигуры) с зоной возможных местоположений Миши (оранжевая и розовая фигуры)
# Рис.3 и рис.4 показывают, как расширяется область во всех направлениях на 1 (из синего в розовый)

# Конвертирует координаты в новую систему
def convert_coord_to_new_system(x, y):
    return x-y, x+y

# Конвертирует координаты в старую систему систему   
def convert_coord_to_old_system(_x, _y):
    return (_x+_y)//2, (_y-_x)//2
    
# Проверяет существовала ли точка в старой системе координаты
def was_point_in_old_system(_x, _y):
    if _x%2 == _y%2:
        return True
    else:
        return False

t, d, n = map(int, input().split())
# Область будем хранить в виде 4 границ: минимум и максимум по оси X', минимум и максимум по оси Y'
min_x = 0
max_x = 0
min_y = 0
max_y = 0

for _ in range(n):
    min_x -= t
    max_x += t
    min_y -= t
    max_y += t
    
    x, y = map(int, input().split())
    _x, _y = convert_coord_to_new_system(x,y)
    
    # Область навигатора хранится аналогично с припиской nav (навигатор): минимум и максимум по оси X', минимум и максимум по оси Y'
    min_x_nav = _x-d
    max_x_nav = _x+d
    min_y_nav = _y-d
    max_y_nav = _y+d

    # Вычисляем пересечение областей
    min_x = max(min_x, min_x_nav)
    max_x = min(max_x, max_x_nav)
    min_y = max(min_y, min_y_nav)
    max_y = min(max_y, max_y_nav)

assumed_coord = []
for _x in range(min_x, max_x+1):
    for _y in range(min_y, max_y+1):
        if was_point_in_old_system(_x, _y):
            x, y = convert_coord_to_old_system(_x, _y)
            assumed_coord.append((x, y))

print(len(assumed_coord))
for point in assumed_coord:
    print(*point)

